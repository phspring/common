<?php

namespace PhSpring\Reflection;

use PHPUnit_Framework_TestCase;
use PhSpring\Annotation\Collection;
use PhSpring\Annotations\Controller;
use PhSpring\TestFixtures\ClassInvokerFixture;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-20 at 08:34:57.
 */
class ReflectionClassTest extends PHPUnit_Framework_TestCase {

    /**
     * @var ReflectionClass
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ReflectionClass(ClassInvokerFixture::class);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::getAnnotation
     */
    public function testGetAnnotation() {
        $annotation = $this->object->getAnnotation(Controller::class);
        $this->assertInstanceOf(Controller::class, $annotation);
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::getAnnotations
     */
    public function testGetAnnotations() {
        $annotations = $this->object->getAnnotations();
        $this->assertNotEmpty($annotations);
        $this->assertEquals(1,  count($annotations));
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::hasAnnotation
     */
    public function testHasAnnotation() {
        $annotations = $this->object->hasAnnotation(Controller::class);
        $this->assertTrue($annotations);
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::getMethod
     */
    public function testGetMethod() {
        $method = $this->object->getMethod('setId');
        $this->assertInstanceOf(ReflectionMethod::class, $method);
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::getMethods
     */
    public function testGetMethods() {
        $methods = $this->object->getMethods();
        $this->assertInternalType('array', $methods);
        $this->assertNotEmpty($methods);
        $method = array_shift($methods);
        $this->assertInstanceOf(ReflectionMethod::class, $method);
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::getProperty
     */
    public function testGetProperty() {
        $property = $this->object->getProperty('singleton');
        $this->assertInstanceOf(ReflectionProperty::class, $property);
    }

    /**
     * @covers PhSpring\Reflection\ReflectionClass::getProperties
     */
    public function testGetProperties() {
        $properties = $this->object->getProperties();
        $this->assertInternalType('array', $properties);
        $this->assertNotEmpty($properties);
        $property = array_shift($properties);
        $this->assertInstanceOf(ReflectionProperty::class, $property);
    }

}
