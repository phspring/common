<?php

namespace PhSpring\Service;

use PHPUnit_Framework_TestCase;
use PhSpring\TestFixtures\Service\ComponentFixture;
use PhSpring\TestFixtures\Service\ComponentInterface;
use PhSpring\TestFixtures\Service\FirstImplementationOfInterface;
use PhSpring\TestFixtures\Service\LazyComponent;
use PhSpring\TestFixtures\Service\LazyPrototypeComponent;
use PhSpring\TestFixtures\Service\PrototypeComponentFixture;
use PhSpring\TestFixtures\Service\SecondImplementationOfInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-24 at 14:36:55.
 */
class HelperTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Helper
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers PhSpring\Service\Helper::getService
     * @todo   Implement testGetService().
     */
    public function testGetSingletonService() {
        $service = Helper::getService(ComponentFixture::class);
        $this->assertInstanceOf(ComponentFixture::class, $service);
        $service2 = Helper::getService(ComponentFixture::class);
        $this->assertInstanceOf(ComponentFixture::class, $service2);
        $this->assertTrue($service === $service2);
    }

    /**
     * @covers PhSpring\Service\Helper::getService
     * @todo   Implement testGetService().
     */
    public function testGetPrototypeService() {
        $service = Helper::getService(PrototypeComponentFixture::class);
        $this->assertInstanceOf(PrototypeComponentFixture::class, $service);
        $service2 = Helper::getService(PrototypeComponentFixture::class);
        $this->assertInstanceOf(PrototypeComponentFixture::class, $service2);
        $this->assertTrue($service !== $service2);
    }

    /**
     * @test
     */
    public function addNamedLazyComponent() {
        Helper::addServiceClass(LazyComponent::class);

        $service1 = Helper::getService(LazyComponent::class);
        $this->assertNotNull($service1);
        $this->assertInstanceOf(LazyComponent::class, $service1);

        $service2 = Helper::getService('lazyComponent');
        $this->assertNotNull($service2);
        $this->assertInstanceOf(LazyComponent::class, $service2);

        $this->assertTrue($service2 == $service1);
    }

    /**
     * @test
     */
    public function addNamedLazyPrototypeComponent() {
        Helper::addServiceClass(LazyPrototypeComponent::class);

        $service1 = Helper::getService(LazyPrototypeComponent::class);
        $this->assertNotNull($service1);
        $this->assertInstanceOf(LazyPrototypeComponent::class, $service1);

        $service2 = Helper::getService('lazyProtoComponent');
        $this->assertNotNull($service2);
        $this->assertInstanceOf(LazyPrototypeComponent::class, $service2);
        $this->assertTrue($service1 !== $service2);
    }

    /**
     * @test
     * @expectedException PhSpring\Service\NoSuchBeanDefinitionException
     */
    public function getMultiple() {
        Helper::addServiceClass(FirstImplementationOfInterface::class);
        Helper::addServiceClass(SecondImplementationOfInterface::class);

        $service10 = Helper::getService(FirstImplementationOfInterface::class);
        $this->assertNotNull($service10);
        $this->assertInstanceOf(FirstImplementationOfInterface::class, $service10);

        $service11 = Helper::getService('first');
        $this->assertNotNull($service11);
        $this->assertInstanceOf(FirstImplementationOfInterface::class, $service11);

        $service20 = Helper::getService(SecondImplementationOfInterface::class);
        $this->assertNotNull($service20);
        $this->assertInstanceOf(SecondImplementationOfInterface::class, $service20);

        $service21 = Helper::getService(SecondImplementationOfInterface::class);
        $this->assertNotNull($service21);
        $this->assertInstanceOf(SecondImplementationOfInterface::class, $service21);

        $this->assertTrue($service10 !== $service20);
        $this->assertTrue($service10 === $service11);
        $this->assertTrue($service11 !== $service21);
        $this->assertTrue($service20 === $service21);

        Helper::getService(ComponentInterface::class);
    }

}
