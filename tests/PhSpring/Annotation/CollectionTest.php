<?php

namespace PhSpring\Annotation;

use PHPUnit_Framework_TestCase;
use PhSpring\Annotations\Autowired;
use PhSpring\Annotations\Qualifier;
use PhSpring\Engine\BeanFactory;
use PhSpring\TestFixtures\Collection as CollectionFixture;
use PhSpring\TestFixtures\Singleton;
use ReflectionProperty;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-27 at 10:55:28.
 */
class CollectionTest extends PHPUnit_Framework_TestCase {

    /**
     * @var Collection
     */
    protected $collection;

    /**
     *
     * @var ReflectionProperty
     */
    private $property;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $instance = new ReflectionProperty(BeanFactory::class, 'instance');
        $instance->setAccessible(true);
        $instance->setValue(null);
        BeanFactory::setAutoLoadSupport(true);
        $this->property = new ReflectionProperty(CollectionFixture::class, 'arrayObject');
    }

    /**
     * @covers PhSpring\Annotation\Collection::run
     * @test
     */
    public function runWithoutAnnotations() {
        $this->setEnv();
        $this->assertTrue($this->property->getValue($this->fixture) === null);
        $this->collection->run($this->fixture);
        $this->assertTrue($this->property->getValue($this->fixture) === null);
    }

    /**
     * @covers PhSpring\Annotation\Collection::run
     * @test
     */
    public function runWithAnnotations() {
        $this->setEnv(array(new Autowired(array())));
        $this->assertTrue($this->property->getValue($this->fixture) === null);
        $this->collection->run($this->fixture);
        $val = $this->property->getValue($this->fixture);
        $this->assertTrue($val === Singleton::getInstance());
    }

    /**
     * @covers PhSpring\Annotation\Collection::hasAnnotation
     * @test
     */
    public function hasAnnotation() {
        $this->setEnv(array(new Autowired(array()), new Qualifier(array('value' => 'haho'))));
        $this->collection->run($this->fixture);
        $this->assertTrue($this->collection->hasAnnotation(Autowired::class));
        $this->assertTrue($this->collection->hasAnnotation(Qualifier::class));
        $this->assertTrue($this->collection->hasAnnotation(Qualifier::class, array('value' => 'haho')));
    }

    /**
     * @covers PhSpring\Annotation\Collection::getAnnotation
     * @test
     */
    public function getAnnotation() {
        $autowired = new Autowired(array());
        $qualifier = new Qualifier(array('value' => 'haho'));
        $this->setEnv(array($autowired, $qualifier));
        $this->collection->run($this->fixture);
        $this->assertEquals($this->collection->getAnnotation(Autowired::class), $autowired);
        $this->assertEquals($this->collection->getAnnotation(Qualifier::class), $qualifier);
        $this->assertEquals($this->collection->getAnnotation(Qualifier::class, array('value' => 'haho')), $qualifier);
    }

    private function setEnv(array $annotations = array()) {
        $this->property = new ReflectionProperty(CollectionFixture::class, 'arrayObject');
        $this->property->setAccessible(true);
        $this->collection = new Collection($annotations, $this->property);
        $this->assertEquals($annotations, $this->collection->getArrayCopy());
        $this->fixture = new CollectionFixture();
    }

}
