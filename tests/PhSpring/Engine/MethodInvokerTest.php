<?php

namespace PhSpring\Engine;

use PHPUnit_Framework_TestCase;
use PhSpring\TestFixtures\ClassInvokerFixture;
use ReflectionClass;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\NotNull;
use Symfony\Component\Validator\ConstraintViolation;
use BadMethodCallException;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-24 at 14:37:02.
 */
class MethodInvokerTest extends PHPUnit_Framework_TestCase {

    /**
     * @var MethodInvoker
     */
    protected $object;
    
    protected function setUp() {
        InvokerConfig::setRequestHelper(new RequestHelper());
    }
    
    /**
     * @covers PhSpring\Engine\MethodInvoker::invoke
     * @test
     */
    public function constructorInvokeWithoutArguments() {
        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, '__construct');
        $property = $ref->getProperty('id');
        $property->setAccessible(true);
        $this->assertTrue($property->getValue($instance) === null);
    }

    /**
     * @covers PhSpring\Engine\MethodInvoker::invoke
     * @test
     */
    public function constructorInvokeWithArguments() {
        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, '__construct', array('id' => 123));
        $property = $ref->getProperty('id');
        $property->setAccessible(true);
        $this->assertTrue($property->getValue($instance) === 123);
    }

    /**
     * @covers PhSpring\Engine\MethodInvoker::invoke
     * @test
     * @expectedException BadMethodCallException
     */
    public function callMethodWithoutExpectedArguments() {
        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, 'setId');
    }

    /**
     * @test
     * @expectedException BadMethodCallException
     */
    public function callUndefinedMethod() {
        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, 'undefinedMethod');
    }

    /**
     * @test
     */
    public function successValidation() {

        $request = InvokerConfig::getRequestHelper();
        $request->setParam('firstName', 'Feri');
        $request->setParam('lastName', 'Lobi');
        $request->setParam('phones', array('+31644449576', '+36209820644'));
        $request->setParam('address', array('street' => 'Vermeerlaan'));

        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, 'indexAction');
        $formProperty = $ref->getProperty('form');
        $formProperty->setAccessible(true);
        $form = $formProperty->getValue($instance);
        $this->assertNotNull($form);

        $bindingResultProperty = $ref->getProperty('bindingResult');
        $bindingResultProperty->setAccessible(true);
        $bindingResult = $bindingResultProperty->getValue($instance);
        $this->assertNotNull($bindingResult);

        $this->assertEquals(0, count($bindingResult), (string) $bindingResult);
    }

    /**
     * @test
     */
    public function testValidationErrorNotBlankFirstName() {

        $request = InvokerConfig::getRequestHelper();
        $request->setParam('firstName', '');
        $request->setParam('lastName', 'Lobi');
        $request->setParam('phones', array('+31644449576', '+36209820644'));
        $request->setParam('address', array('street' => 'Vermeerlaan'));

        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, 'indexAction');
        $bindingResultProperty = $ref->getProperty('bindingResult');
        $bindingResultProperty->setAccessible(true);
        /* @var $bindingResult BindingResult */
        $bindingResult = $bindingResultProperty->getValue($instance);
        $this->assertEquals(1, count($bindingResult), (string) $bindingResult);
        /* @var $current ConstraintViolation */
        $current = $bindingResult->getIterator()->current();
        $this->assertEquals('firstName', $current->getPropertyPath());
        $this->assertEquals((new NotBlank())->message, $current->getMessage());
    }
    
    /**
     * @test
     */
    public function testValidationErrorNotNullAddress() {
        $request = InvokerConfig::getRequestHelper();
        $request->setParam('firstName', 'Lobi');
        $request->setParam('lastName', 'Lobi');
        $request->setParam('phones', array('+31644449576', '+36209820644'));

        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, 'indexAction');
        $bindingResultProperty = $ref->getProperty('bindingResult');
        $bindingResultProperty->setAccessible(true);
        /* @var $bindingResult BindingResult */
        $bindingResult = $bindingResultProperty->getValue($instance);
        $this->assertEquals(1, count($bindingResult), (string) $bindingResult);
        
        /* @var $current ConstraintViolation */
        $current = $bindingResult->getIterator()->current();
        $this->assertEquals('address', $current->getPropertyPath());
        $this->assertEquals((new NotNull())->message, $current->getMessage());
    }
    
    /**
     * @test
     */
    public function testValidationErrorNotBlankAddressStreet() {
        $request = InvokerConfig::getRequestHelper();
        $request->setParam('firstName', 'Lobi');
        $request->setParam('lastName', 'Lobi');
        $request->setParam('phones', array('+31644449576', '+36209820644'));
        $request->setParam('address', array('street' => null));

        $ref = new ReflectionClass(ClassInvokerFixture::class);
        $instance = $ref->newInstanceWithoutConstructor();
        MethodInvoker::invoke($instance, 'indexAction');
        $bindingResultProperty = $ref->getProperty('bindingResult');
        $bindingResultProperty->setAccessible(true);
        /* @var $bindingResult BindingResult */
        $bindingResult = $bindingResultProperty->getValue($instance);
        $this->assertEquals(1, count($bindingResult), (string) $bindingResult);
        /* @var $current ConstraintViolation */
        $current = $bindingResult->getIterator()->current();
        $this->assertEquals('address.street', $current->getPropertyPath());
        $this->assertEquals((new NotBlank())->message, $current->getMessage());
    }
    
    
}
