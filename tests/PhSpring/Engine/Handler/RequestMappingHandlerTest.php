<?php

namespace PhSpring\Engine\Handler;

use PHPUnit_Framework_TestCase;
use PhSpring\Annotations\ExpressionAnd;
use PhSpring\Annotations\ExpressionNot;
use PhSpring\Annotations\ExpressionOr;
use PhSpring\Annotations\RequestMapping;
use PhSpring\Annotations\RequestMethod;
use PhSpring\Engine\Exceptions\UnSupportedRequestException;
use ReflectionMethod;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-23 at 06:22:38.
 */
class RequestMappingHandlerTest extends PHPUnit_Framework_TestCase {

    /**
     * @var RequestMappingHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $_SERVER['REQUEST_METHOD'] = 'POST';
        $_SERVER['HTTP_X_REQUESTED_WITH'] = 'dummy';
    }

    protected function getHandlerWithAnnotation($annotation) {
        return new RequestMappingHandler($annotation);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(RequestMethod::POST)
     */
    public function checkRunWithSimpleMethodValue() {
        $this->getHandlerWithAnnotation(new RequestMapping(array('value' => RequestMethod::POST)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=RequestMethod::POST)
     */
    public function checkRunWithSimpleMethodValueWithParamName() {
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => RequestMethod::POST)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionOr({RequestMethod::GET,RequestMethod::XMLHTTPREQUEST}))
     */
    public function checkRunWithMethodValueWithExpressionOrWithGetAndXmlhttprequest() {
        $or = new ExpressionOr(array('value' => array(RequestMethod::GET, RequestMethod::XMLHTTPREQUEST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('value' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionOr({RequestMethod::GET,RequestMethod::XMLHTTPREQUEST}))
     */
    public function checkRunWithMethodValueWithExpressionOrWithGetAndXmlhttprequestWithParamName() {
        $or = new ExpressionOr(array('value' => array(RequestMethod::GET, RequestMethod::XMLHTTPREQUEST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionOr({RequestMethod::GET,RequestMethod::POST}))
     */
    public function checkRunWithMethodValueWithExpressionOrWithGetAndPost() {
        $or = new ExpressionOr(array('value' => array(RequestMethod::GET, RequestMethod::POST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('value' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionOr({RequestMethod::GET,RequestMethod::POST}))
     */
    public function checkRunWithMethodValueWithExpressionOrWithGetAndPostWithParamName() {
        $or = new ExpressionOr(array('value' => array(RequestMethod::GET, RequestMethod::POST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionAnd({RequestMethod::GET,RequestMethod::XMLHTTPREQUEST}))
     */
    public function checkRunWithMethodValueWithExpressionAndWithGetAndXmlhttprequest() {
        $or = new ExpressionAnd(array('value' => array(RequestMethod::POST, RequestMethod::XMLHTTPREQUEST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('value' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionAnd({RequestMethod::POST,RequestMethod::XMLHTTPREQUEST}))
     */
    public function checkRunWithMethodValueWithExpressionAndWithGetAndXmlhttprequestWithParamName() {
        $or = new ExpressionAnd(array('value' => array(RequestMethod::POST, RequestMethod::XMLHTTPREQUEST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionAnd({RequestMethod::POST,RequestMethod::POST}))
     */
    public function checkRunWithMethodValueWithExpressionAndWithGetAndPost() {
        $or = new ExpressionAnd(array('value' => array(RequestMethod::POST, RequestMethod::POST)));
        $or->value = array(RequestMethod::POST, RequestMethod::POST);
        $this->getHandlerWithAnnotation(new RequestMapping(array('value' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionAnd({RequestMethod::GET,RequestMethod::XMLHTTPREQUEST}))
     * @expectedException PhSpring\Engine\Exceptions\UnSupportedRequestException
     */
    public function checkRunWithMethodValueWithExpressionAndWithGetAndPostWithParamName() {
        $or = new ExpressionAnd(array('value' => array(RequestMethod::GET, RequestMethod::XMLHTTPREQUEST)));
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionNot(RequestMethod::POST))
     * @expectedException PhSpring\Engine\Exceptions\UnSupportedRequestException
     */
    public function checkRunWithMethodValueWithExpressionNotWithPost() {
        $or = new ExpressionNot(array('value' => RequestMethod::POST));
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionNot(RequestMethod::GET))
     */
    public function checkRunWithMethodValueWithExpressionNotWithGet() {
        $or = new ExpressionNot(array('value' => RequestMethod::GET));
        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

    /**
     * @covers PhSpring\Engine\Handler\RequestMappingHandler::run
     * @test
     * @RequestMapping(method=@ExpressionOr(
     *      @ExpressionNot(
     *          @ExpressionAnd({
     *              RequestMethod::GET, 
     *              RequestMethod::XMLHTTPREQUEST
     *          })
     *      ),
     *      @ExpressionAnd({
     *          RequestMethod::POST, 
     *          RequestMethod::XMLHTTPREQUEST
     *      })
     *  )
     * )
     */
    public function checkRunWithMethodMultipleExpression() {
        $or = new ExpressionOr(array('value' =>
            array(
                new ExpressionNot(array(
                    'value' => new ExpressionAnd(array(
                        'value' => array(RequestMethod::GET, RequestMethod::XMLHTTPREQUEST)
                            ))
                        )),
                new ExpressionAnd(array(
                    'value' => array(RequestMethod::POST, RequestMethod::XMLHTTPREQUEST)
                        ))
            )
        ));

        $this->getHandlerWithAnnotation(new RequestMapping(array('method' => $or)))->run(new ReflectionMethod(__CLASS__, 'setUp'), NULL);
    }

}

function filter_input($type, $variable_name, $filter = NULL, $options = NULL) {
    switch ($type) {
        case INPUT_GET:
            return isset($_GET[$variable_name]) ? $_GET[$variable_name] : null;
            break;
        case INPUT_POST:
            return isset($_POST[$variable_name]) ? $_POST[$variable_name] : null;
            break;
        case INPUT_SERVER:
            return isset($_SERVER[$variable_name]) ? $_SERVER[$variable_name] : null;
            break;
        default : return null;
    }
}
