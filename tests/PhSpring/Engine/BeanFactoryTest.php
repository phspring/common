<?php

namespace PhSpring\Engine;

use PHPUnit_Framework_TestCase;
use PhSpring\Service\NoSuchBeanDefinitionException;
use PhSpring\TestFixtures\ClassInvokerFixture;
use PhSpring\TestFixtures\Service\ComponentFixture;
use PhSpring\TestFixtures\Service\ComponentInterface;
use PhSpring\TestFixtures\Service\FirstImplementationOfInterface;
use PhSpring\TestFixtures\Service\LazyComponent;
use PhSpring\TestFixtures\Service\LazyPrototypeComponent;
use PhSpring\TestFixtures\Service\PrototypeComponentFixture;
use PhSpring\TestFixtures\Service\SecondImplementationOfInterface;
use PhSpring\TestFixtures\Singleton;
use ReflectionProperty;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-03 at 14:06:30.
 */
class BeanFactoryTest extends PHPUnit_Framework_TestCase {

    /**
     * @var BeanFactory
     */
    protected $factory;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $instance = new ReflectionProperty(BeanFactory::class, 'instance');
        $instance->setAccessible(true);
        $instance->setValue(null);
        BeanFactory::setAutoLoadSupport(false);
        $this->factory = BeanFactory::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers PhSpring\Engine\BeanFactory::createBean
     * @test
     */
    public function createBean() {
        $this->factory->createBean(Singleton::class);
        $bean = $this->factory->getBean(Singleton::class);
        $this->assertInstanceOf(Singleton::class, $bean);
    }

    /**
     * @covers PhSpring\Engine\BeanFactory::getBean
     * @test
     * @expectedException PhSpring\Service\NoSuchBeanDefinitionException
     * @runInSeparateProcess
     */
    public function beanNotFound() {
        $this->factory->getBean(Singleton::class);
    }

    /**
     * @covers PhSpring\Engine\BeanFactory::getBean
     * @test
     */
    public function beanFound() {
        $this->factory->createBean(Singleton::class);
        $bean = $this->factory->getBean(Singleton::class);
        $this->assertInstanceOf(Singleton::class, $bean);
    }

    /**
     * @covers PhSpring\Engine\BeanFactory::isPrototype
     * @test
     */
    public function isPrototypeFalse() {
        $this->factory->createBean(Singleton::class);
        $this->assertFalse($this->factory->isPrototype(Singleton::class));
    }

    /**
     * @covers PhSpring\Engine\BeanFactory::isPrototype
     * @test
     */
    public function isPrototypeTrue() {
        $this->factory->addBeanClass(Singleton::class, 'SingletonTestService');
        $this->factory->createBean(ClassInvokerFixture::class);
        $this->assertFalse($this->factory->isPrototype(ClassInvokerFixture::class));
    }

    /**
     * @covers PhSpring\Service\BeanFactory::getBean
     * @todo   Implement testGetService().
     */
    public function testGetSingletonService() {
        BeanFactory::setAutoLoadSupport(true);

        $service = $this->factory->getBean(ComponentFixture::class);
        $this->assertInstanceOf(ComponentFixture::class, $service);
        $service2 = $this->factory->getBean(ComponentFixture::class);
        $this->assertInstanceOf(ComponentFixture::class, $service2);
        $this->assertTrue($service === $service2);
    }

    /**
     * @covers PhSpring\Service\BeanFactory::getBean
     * @todo   Implement testGetService().
     * @ignore
     */
    public function testGetPrototypeService() {
        BeanFactory::setAutoLoadSupport(true);
        $service = $this->factory->getBean(PrototypeComponentFixture::class);
        $this->assertInstanceOf(PrototypeComponentFixture::class, $service);
        $service2 = $this->factory->getBean(PrototypeComponentFixture::class);
        $this->assertInstanceOf(PrototypeComponentFixture::class, $service2);
        $this->assertTrue($service !== $service2);
    }

    /**
     * @test
     */
    public function testaddNamedLazyComponent() {
        $this->factory->addBeanClass(LazyComponent::class);
        $service1 = $this->factory->getBean(LazyComponent::class);
        $this->assertNotNull($service1);
        $this->assertInstanceOf(LazyComponent::class, $service1);

        $service2 = $this->factory->getBean('lazyComponent');
        $this->assertNotNull($service2);
        $this->assertInstanceOf(LazyComponent::class, $service2);

        $this->assertTrue($service2 == $service1);
    }

    /**
     * @test
     */
    public function addNamedLazyPrototypeComponent() {
        $this->factory->addBeanClass(LazyPrototypeComponent::class);

        $service1 = $this->factory->getBean(LazyPrototypeComponent::class);
        $this->assertNotNull($service1);
        $this->assertInstanceOf(LazyPrototypeComponent::class, $service1);

        $service2 = $this->factory->getBean('lazyProtoComponent');
        $this->assertNotNull($service2);
        $this->assertInstanceOf(LazyPrototypeComponent::class, $service2);
        $this->assertTrue($service1 !== $service2);
    }

    /**
     * @test
     * @ignore
     * @expectedException PhSpring\Service\NoSuchBeanDefinitionException
     */
    public function getMultiple() {
        BeanFactory::setAutoLoadSupport(true);
        $this->factory->addBeanClass(FirstImplementationOfInterface::class);
        $this->factory->addBeanClass(SecondImplementationOfInterface::class);

        $service10 = $this->factory->getBean(FirstImplementationOfInterface::class);
        $this->assertNotNull($service10);
        $this->assertInstanceOf(FirstImplementationOfInterface::class, $service10);

        $service11 = $this->factory->getBean('first');
        $this->assertNotNull($service11);
        $this->assertInstanceOf(FirstImplementationOfInterface::class, $service11);

        $service20 = $this->factory->getBean(SecondImplementationOfInterface::class);
        $this->assertNotNull($service20);
        $this->assertInstanceOf(SecondImplementationOfInterface::class, $service20);

        $service21 = $this->factory->getBean(SecondImplementationOfInterface::class);
        $this->assertNotNull($service21);
        $this->assertInstanceOf(SecondImplementationOfInterface::class, $service21);

        $this->assertTrue($service10 !== $service20);
        $this->assertTrue($service10 === $service11);
        $this->assertTrue($service11 !== $service21);
        $this->assertTrue($service20 === $service21);

        $this->factory->getBean(ComponentInterface::class);
    }

}
